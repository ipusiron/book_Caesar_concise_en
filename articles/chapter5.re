= シフト暗号を改良する

前章では実際にシフト暗号を解読しました。

シフト暗号の秘匿性を低下させる根本的な問題は、利用可能な鍵数が少ないことにあります。
鍵の数が少ないため、総当たり攻撃や統計的解析によって簡単に解読されてしまいます。

この事実を踏まえて、本章ではシフト暗号の安全性を向上させるための具体的な改良方法を紹介します。
これにより、シフト暗号の秘匿性が向上し、より安全な通信が可能になることを目指します。

=={vigenere_cipher} ヴィジュネル暗号に拡張する

ヴィジュネル表は、シフト暗号における26種類の置換表を並べたものでした。
一番左は鍵文字であり、この鍵文字を基準にしてアルファベットが辞書順に並んでいます。

#@# //embed[latex]{
#@# \floatplacement{figure}{t}
#@# //}
#@# //image[tikan_table_tougou][ヴィジュネル表【再掲】][scale=1.0]{
#@# //}
#@# //embed[latex]{
#@# \floatplacement{figure}{H}
#@# //}

//embed[html]{
<figure style="text-align: center;">
  <img src="images/tikan_table_tougou_epub.png" alt="ヴィジュネル表【再掲】" style="max-width: 90%; height: auto;" />
  <figcaption>図：ヴィジュネル表【再掲】</figcaption>
</figure>
//}

16世紀のフランスの暗号学者である、ブレード・ド・ヴィジュネルは、ヴィジュネル表を用いた多表式暗号を開発しました。
従来のシフト暗号では単一の鍵文字が使用するのに対し、ヴィジュネル暗号では鍵として文字列が使用します。
これを鍵文字列と呼ぶことにします。

この鍵文字列により、鍵の総数が増えるため、総当たり攻撃に対して格段に強くなります。

=== ヴィジュネル暗号のアルゴリズム

ヴィジュネル暗号のアルゴリズムは、次のようになります。

#@# //embed[latex]{
#@# \floatplacement{figure}{t}
#@# //}
#@# //image[vigenere_cipher][ヴィジュネル暗号のアルゴリズム][scale=1.0]{
#@# //}
#@# //embed[latex]{
#@# \floatplacement{figure}{H}
#@# //}

//embed[html]{
<figure style="text-align: center;">
  <img src="images/vigenere_cipher.png" alt="ヴィジュネル暗号のアルゴリズム" style="max-width: 90%; height: auto;" />
  <figcaption>図：ヴィジュネル暗号のアルゴリズム</figcaption>
</figure>
//}

=== 鍵生成について

鍵生成アルゴリズムKeyGenは、暗号化プロセスで使用する鍵文字列を生成します。
この生成された鍵文字列は、送受信者間で秘密に共有され、暗号通信の安全性を保つために使用されます。

鍵文字列の長さはその安全性に直結します。
鍵文字列が短い場合、周期が発生しやすくなり、解読されるリスクが高まります@<fn>{crack_vigenere}。
一方で、鍵文字列が長すぎると扱いが難しくなるため、実用的な長さでのバランスが求められます。
通常、使いやすさと安全性の間で適度な長さの鍵文字列が選ばれます。

//footnote[crack_vigenere][ヴィジュネル暗号の解読法については、『暗号技術のすべて』P.75-81で解説しています。また、機会があればヴィジュネル暗号をテーマにした同人誌を頒布したいと考えています。]

鍵文字列が1文字なら、シフト暗号と同等になります。

鍵文字列は、何らかのキーワード（このとき鍵キーワードと呼ぶ）でも構いませんが、ランダムであれば安全性が向上します。

もし暗号化のたびに鍵をランダムに選択して、鍵長が平文長あるいはそれ以上の長さだったとします。
すると、暗号文からアルファベットを使っていることはわかりますが、平文の内容に関する情報はまったく漏れません。
これは理論的に最高の安全性を持つとされる、ワンタイムパッドと同等になります。

よって、ヴィジュネル暗号は単一換字式暗号の一般系といえます。
鍵文字列のサイズを1文字にした方式がシフト暗号、平文のサイズ以上にしたものがワンタイムパッド暗号になります。
そして、シフト暗号の鍵を3に固定したものがシーザー暗号になるわけです。

=== 暗号化の仕組み

ヴィジュネル暗号の暗号化は、平文の各文字をシフト暗号で暗号化する処理になります。
たとえば、平文の1文字目は、鍵文字列の1文字目を鍵文字として、シフト暗号で暗号化します。
2文字目以降も同様に処理します。

ただし、鍵文字列が平文より短い場合、鍵文字列を連続で連結したものを鍵として利用します。
この鍵を拡張鍵といいます。

以上をまとめると、平文のn文字目は、拡張鍵のn文字目を鍵文字としてシフト暗号で暗号化すると言い換えられます。

=== 手動で暗号化してみる

たとえば、平文が"hello world."、鍵文字列が"STAR"だとします。
平文から空白とピリオドを取り除くと、"helloworld"になります。

平文のサイズ（ここでは10文字）に合うように、鍵文字列（ここでは4文字）から拡張鍵を作ると、"STARSTARST"（10文字）になります。
「"STAR"||"STAR"||"ST"」のように連結されています。

あとは、拡張鍵を用いてシフト暗号で暗号化します。
その際、ヴィジュネル表を活用して、1文字ずつ変換することになります。

暗号化の結果、"ZXLCGPOIDW"という暗号文が得られます（@<table>{vigenere_example}）。

//table[vigenere_example][ヴィジュネル暗号の暗号化の例]{
平文	h	e	l	l	o	w	o	r	l	d
-------------------------------------------------------------
拡張鍵	S	T	A	R	S	T	A	R	S	T
暗号文	Z	X	L	C	G	P	O	I	D	W
//}

== ヴィジュネル暗号ツールで実験してみよう

ヴィジュネル暗号ツール（Vigenere Cipher Tool）は、ヴィジュネル暗号ツールの暗号化・復号を行うWebベースのツールです。
暗号化のプロセスを視覚的に理解できるように設計されています。

 * GitHubページ
 ** @<href>{https://github.com/ipusiron/vigenere-cipher-tool}
 * デモページ
 ** @<href>{https://ipusiron.github.io/vigenere-cipher-tool/}

先ほど手動で暗号化した例を、このツールで実験し、同じ暗号文が得られることを確認してください。

//embed[html]{
<figure style="text-align: center;">
  <img src="images/vigenere_cipher_tool.png" alt="ヴィジュネル暗号ツールで同じ暗号化を実現したところ" style="max-width: 90%; height: auto;" />
  <figcaption>図：ヴィジュネル暗号ツールで同じ暗号化を実現したところ</figcaption>
</figure>
//}
